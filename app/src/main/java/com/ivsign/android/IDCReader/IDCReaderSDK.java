package com.ivsign.android.IDCReader;import android.content.Context;import android.content.res.AssetManager;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;public class IDCReaderSDK {    private static final String TAG = "unpack";    public IDCReaderSDK() {        //if( 0==wltInit("") )        //Log.i(TAG,  "wltInit success");    }    //	public static int Init()    //	{    //		return wltInit(Environment.getExternalStorageDirectory() + "/wltlib");    //	}    public static int Init(Context context) {        try {            copyAssetDirToFiles(context, "wltlib");        } catch (Exception e) {            e.printStackTrace();            return 1;        }        return wltInit(context.getFilesDir() + "/wltlib");    }    public static int unpack(byte[] wltdata, byte[] licdata) {        return wltGetBMP(wltdata, licdata);    }    // native functin interface    public static native int wltInit(String workPath);    public static native int wltGetBMP(byte[] wltdata, byte[] licdata);    /* this is used to load the 'wltdecode' library on application     */    static {        System.loadLibrary("wltdecode");    }    public static void copyAssetDirToFiles(Context context, String dirname)            throws IOException {        File dir = new File(context.getFilesDir() + "/" + dirname);        dir.mkdir();        AssetManager assetManager = context.getAssets();        String[] children = assetManager.list(dirname);        for (String child : children) {            child = dirname + '/' + child;            String[] grandChildren = assetManager.list(child);            if (0 == grandChildren.length)                copyAssetFileToFiles(context, child);            else                copyAssetDirToFiles(context, child);        }    }    public static void copyAssetFileToFiles(Context context, String filename)            throws IOException {        InputStream is = context.getAssets().open(filename);        byte[] buffer = new byte[is.available()];        is.read(buffer);        is.close();        File of = new File(context.getFilesDir() + "/" + filename);        of.createNewFile();        FileOutputStream os = new FileOutputStream(of);        os.write(buffer);        os.close();    }}