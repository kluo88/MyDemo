apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.itkluo.demo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
//    buildTypes {
//        release {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
//    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled true
//            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "BUGLY_DEBUG", "false" // 是否输出LOG信息
            resValue "string", "myname", "test1"
        }

        debug {
            minifyEnabled false
            zipAlignEnabled false
//            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "BUGLY_DEBUG", "true"
            resValue "string", "myname", "test2"
        }

    }

    applicationVariants.all { variant ->
        //方式1 修改输出的APK路径，支持绝对路径
//        if (variant.buildType.name != "debug") {//防止AS无法安装debug包(apk)
//            variant.getPackageApplication().outputDirectory = new File(myPackageDir())
//        }
        variant.outputs.all { output ->
            if (outputFileName != null && outputFileName.endsWith('.apk')) {
                //variant.flavorName: fla2   variant.buildType.name:debug   variant.name:fla2Debug
                println "variant.buildType.name:" + "${variant.buildType.name}" + "_variant.name:" + "${variant.name}" + "_variant.flavorName:" + "${variant.flavorName}"

                if (variant.buildType.name == 'release') {
                    def apkName = "${appNamePrefix()}" + "_${variant.versionName}"
                    if (!variant.flavorName.isEmpty()) {
                        apkName += "_${variant.flavorName}"
                    }
                    outputFileName = apkName + "_${variant.buildType.name}" + "_${assembleApkTime()}" + ".apk"
//                + "_"+applicationId
                    //方式2 修改输出的APK路径，支持相对路径
//                    outputFileName =  "../../../${apkName}"
                } else {
                    def apkName = "${appNamePrefix()}" + "_${variant.versionName}"
                    if (!variant.flavorName.isEmpty()) {
                        apkName += "_${variant.flavorName}"
                    }
                    outputFileName = apkName + "_${variant.buildType.name}" + ".apk"
                }

            }
        }
    }
//
//// 或者，使用这种方式，只支持相对路径
//    applicationVariants.all { variant ->
//        String time = new Date().format('yyyyMMdd_HHmmss')
//        String pkgName = "enjoy_${time}_v${defaultConfig.versionName}_${buildType.name}_${flavorName}.apk"
//        outputs.first().outputFileName = "../../../${pkgName}" // 它不能使用绝对路径，也就是说可以使用项目的相对路径
//    }


    flavorDimensions "client"  //维度，根据业务场景来， 比如 client（定制不同客户业务）,supplier（供应商）， theme (定制主题业务)
    productFlavors {//风味
        //最后打包风味的总数就是 维度x风味
        fla1 {
            applicationId "com.itkluo.demo1"
            versionCode 1
            versionName "1.1.1." + versionCode
            dimension 'client' //当前风味所处的维度是channel维度
            manifestPlaceholders = [client: "a"]
        }

        fla2 {
            dimension 'client'
            applicationId "com.itkluo.demo2"
            versionCode 2
            versionName "1.1.2." + versionCode
            manifestPlaceholders = [client: "b"]
        }

    }

}

static def assembleApkTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
}

static def myPackageDir() {
    return "C:\\Users\\adminstrator\\Desktop\\appPackage"
}

static def appNamePrefix() {
    return "MyDemo"
}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.2.1'
    implementation 'com.jakewharton:butterknife:8.2.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.7'
    implementation 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.3@aar'
    //如果想要实现条件触发获取权限(结合RxBinding使用)的情况，则还需要依赖RxBinding开源库
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'cn.bingoogolapple:bga-banner:2.2.1@aar'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    implementation 'com.google.guava:guava:18.0'
    implementation 'com.google.code.gson:gson:2.2.4'
    implementation files('libs/fastjson-1.2.2.jar')
    implementation files('libs/xUtils-2.6.14.jar')

    // 仅在debug包启用BlockCanary进行卡顿监控和提示的话，可以这么用
//    debugCompile 'com.github.markzhai:blockcanary-android:1.5.0'
//    releaseCompile 'com.github.markzhai:blockcanary-no-op:1.5.0'
    // 卡顿监控的另一个方案 https://blog.csdn.net/u012874222/article/details/79400154
    // 卡顿监控的另一个方案 https://blog.csdn.net/u012874222/article/details/79417549
    // 卡顿监控的另一个方案 https://github.com/pengweiqiang/ANRWatch

    implementation project(':lib_common')
}
